{"version":3,"sources":["components/subcomponents/StartingCards.jsx","components/subcomponents/DropDown.jsx","components/subcomponents/SpriteCollection.jsx","components/subcomponents/SelectedCard.jsx","components/pages/Home.jsx","App.js","reportWebVitals.js","index.js"],"names":["StartingCards","image","header","className","charAt","toUpperCase","slice","src","alt","DropDown","getsearchedPoke","setSpriteGen","setSpriteVer","spriteGen","getkeys","obj","keys","Object","entries","key","push","name","id","onChange","e","target","value","sprites","versions","map","SpriteCollection","spriteObj","spriteVer","SelectedCard","height","weight","abilities","stats","types","normal","fire","water","electric","grass","ice","fighting","poison","ground","flying","psychic","bug","rock","ghost","dragon","dark","steel","fairy","type","style","backgroundColor","other","ability","dispability","stat","width","textAlign","color","borderRadius","lineHeight","dispStats","Home","useState","pokemonList","setPokemonList","totalCount","setTotalCount","randomPokeList","setRandomPokeList","clickedCard","setClickedCard","searchedPoke","setSearchedPoke","setGetSearchedPoke","useEffect","axios","get","then","res","data","count","results","catch","err","min","Math","ceil","max","floor","randomArray","i","random","searchPokeFunc","setPoke","validate","filter","pokemon","toLowerCase","split","join","action","onSubmit","preventDefault","placeholder","includes","eachCard","onClick","url","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.075b2b9c.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function StartingCards({image, header}) {\r\n  return (\r\n    <div className=\"starting-cards\">\r\n      <p className=\"starting-cards__header\">{header.charAt(0).toUpperCase() + header.slice(1)}</p>\r\n      <img src={image} alt=\"Pokemon Sprite\" className=\"starting-cards__image\" />\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function DropDown({getsearchedPoke, setSpriteGen, setSpriteVer, spriteGen}) {\r\n  const getkeys = (obj) => {\r\n    let keys = [];\r\n    if (obj) {\r\n      for (const [key] of Object.entries(obj)) {\r\n        keys.push(key);\r\n      }\r\n    }\r\n    return keys;\r\n  };\r\n  return (\r\n    <div>\r\n      <select\r\n        name=\"Generation\"\r\n        id=\"Gen\"\r\n        onChange={(e) => {\r\n          setSpriteGen(e.target.value);\r\n        }}\r\n      >\r\n        {getkeys(getsearchedPoke?.sprites.versions).map((key) => (\r\n          <option value={key}>{key}</option>\r\n        ))}\r\n      </select>\r\n      <select\r\n        name=\"Version\"\r\n        id=\"Ver\"\r\n        onChange={(e) => {\r\n          setSpriteVer(e.target.value);\r\n        }}\r\n      >\r\n        {getkeys(getsearchedPoke?.sprites.versions[spriteGen]).map((key) => (\r\n          <option value={key}>{key}</option>\r\n        ))}\r\n      </select>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function SpriteCollection({spriteObj, getsearchedPoke, spriteGen, spriteVer}) {\r\n  const getkeys = (obj) => {\r\n    let keys = [];\r\n    if (obj) {\r\n      for (const [key] of Object.entries(obj)) {\r\n        keys.push(key);\r\n      }\r\n    }\r\n    return keys;\r\n  };\r\n  return (\r\n    <div>\r\n      {getkeys(spriteObj).map((key) => {\r\n        if (spriteObj[key]) {\r\n          return (\r\n            <img src={getsearchedPoke.sprites.versions[spriteGen][spriteVer][key]} alt=\"sprite\" />\r\n          );\r\n        }\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport DropDown from \"./DropDown\";\r\nimport SpriteCollection from \"./SpriteCollection\";\r\n\r\nexport default function SelectedCard({\r\n  name,\r\n  height,\r\n  weight,\r\n  abilities,\r\n  stats,\r\n  getsearchedPoke,\r\n  setSpriteGen,\r\n  setSpriteVer,\r\n  spriteGen,\r\n  spriteVer,\r\n}) {\r\n  const types = {\r\n    normal: \"#A8A77A\",\r\n    fire: \"#EE8130\",\r\n    water: \"#6390F0\",\r\n    electric: \"#F7D02C\",\r\n    grass: \"#7AC74C\",\r\n    ice: \"#96D9D6\",\r\n    fighting: \"#C22E28\",\r\n    poison: \"#A33EA1\",\r\n    ground: \"#E2BF65\",\r\n    flying: \"#A98FF3\",\r\n    psychic: \"#F95587\",\r\n    bug: \"#A6B91A\",\r\n    rock: \"#B6A136\",\r\n    ghost: \"#735797\",\r\n    dragon: \"#6F35FC\",\r\n    dark: \"#705746\",\r\n    steel: \"#B7B7CE\",\r\n    fairy: \"#D685AD\",\r\n  };\r\n  const dispability = (ability) => {\r\n    return ability ? (\r\n      <span\r\n        className=\"selected-card__stat-wrapper__ability-list__abilities\"\r\n        key={ability.ability.name}\r\n      >\r\n        {ability.ability.name.charAt(0).toUpperCase() + ability.ability.name.slice(1)}\r\n      </span>\r\n    ) : (\r\n      <p></p>\r\n    );\r\n  };\r\n  const dispStats = (stat) => {\r\n    return stat ? (\r\n      <div className=\"selected-card__stat-wrapper__stat-list-wrapper__stat-list\">\r\n        <p\r\n          className=\"selected-card__stat-wrapper__stat-list-wrapper__stat-list__stat\"\r\n          key={stat.stat.name}\r\n        >\r\n          {stat.stat.name.charAt(0).toUpperCase() + stat.stat.name.slice(1)}\r\n        </p>\r\n        <p\r\n          className=\"selected-card__stat-wrapper__stat-list__stat\"\r\n          style={{\r\n            width: `${stat[\"base_stat\"]}px`,\r\n            textAlign: \"center\",\r\n            backgroundColor: \"green\",\r\n            color: \"white\",\r\n            borderRadius: \"5px\",\r\n            lineHeight: \"25px\",\r\n          }}\r\n          key={stat[\"base_stat\"]}\r\n        >\r\n          {stat[\"base_stat\"]}\r\n        </p>\r\n      </div>\r\n    ) : (\r\n      <p></p>\r\n    );\r\n  };\r\n  return (\r\n    <div className=\"selected-card\">\r\n      <div className=\"selected-card__type-wrapper\">\r\n        {getsearchedPoke.types.map((type) => {\r\n          return (\r\n            <p\r\n              className=\"selected-card__type-wrapper__type\"\r\n              style={{backgroundColor: types[type.type.name]}}\r\n            >\r\n              {type.type.name.charAt(0).toUpperCase() + type.type.name.slice(1)}\r\n            </p>\r\n          );\r\n        })}\r\n      </div>\r\n      <div className=\"selected-card__image-wrapper\">\r\n        <img\r\n          className=\"selected-card__image-wrapper__image\"\r\n          src={getsearchedPoke.sprites.other[\"official-artwork\"][\"front_default\"]}\r\n          alt=\"sprite\"\r\n        />\r\n      </div>\r\n      <div className=\"selected-card__wrapper\">\r\n        <p className=\"selected-card__wrapper__content\">Name</p>\r\n        <p className=\"selected-card__wrapper__content\">\r\n          {name.charAt(0).toUpperCase() + name.slice(1)}\r\n        </p>\r\n      </div>\r\n      <div className=\"selected-card__wrapper\">\r\n        <p className=\"selected-card__wrapper__content\">Height</p>\r\n        <p className=\"selected-card__wrapper__content\">{height}</p>\r\n      </div>\r\n      <div className=\"selected-card__wrapper\">\r\n        <p className=\"selected-card__wrapper__content\">Weight</p>\r\n        <p className=\"selected-card__wrapper__content\">{weight}</p>\r\n      </div>\r\n      <div className=\"selected-card__stat-wrapper\">\r\n        <div className=\"selected-card__stat-wrapper__ability-list\">\r\n          {abilities.map((ability) => dispability(ability))}\r\n        </div>\r\n        <div className=\"selected-card__stat-wrapper__stat-list-wrapper\">\r\n          {stats.map((stat) => dispStats(stat))}\r\n        </div>\r\n      </div>\r\n      <section>\r\n        {getsearchedPoke ? (\r\n          <DropDown\r\n            getsearchedPoke={getsearchedPoke}\r\n            setSpriteGen={setSpriteGen}\r\n            setSpriteVer={setSpriteVer}\r\n            spriteGen={spriteGen}\r\n          />\r\n        ) : (\r\n          <div></div>\r\n        )}\r\n      </section>\r\n      <section>\r\n        <SpriteCollection\r\n          spriteObj={getsearchedPoke?.sprites.versions[spriteGen][spriteVer]}\r\n          getsearchedPoke={getsearchedPoke}\r\n          spriteGen={spriteGen}\r\n          spriteVer={spriteVer}\r\n        />\r\n      </section>\r\n    </div>\r\n  );\r\n}\r\n","import React, {useState, useEffect} from \"react\";\r\nimport axios from \"axios\";\r\nimport StartingCards from \"../subcomponents/StartingCards\";\r\nimport SelectedCard from \"../subcomponents/SelectedCard\";\r\nimport DropDown from \"../subcomponents/DropDown\";\r\nimport SpriteCollection from \"../subcomponents/SpriteCollection\";\r\n\r\nexport default function Home() {\r\n  const [pokemonList, setPokemonList] = useState();\r\n  const [totalCount, setTotalCount] = useState();\r\n  const [randomPokeList, setRandomPokeList] = useState();\r\n  const [clickedCard, setClickedCard] = useState();\r\n  const [searchedPoke, setSearchedPoke] = useState();\r\n  const [getsearchedPoke, setGetSearchedPoke] = useState();\r\n  const [spriteGen, setSpriteGen] = useState(\"generation-i\");\r\n  const [spriteVer, setSpriteVer] = useState(\"red-blue\");\r\n\r\n  //find the species limit and create a list of all the species names/ url in it\r\n  useEffect(() => {\r\n    axios\r\n      .get(\"https://pokeapi.co/api/v2/pokemon-species/?limit=0\")\r\n      .then((res) => {\r\n        setTotalCount(res.data.count);\r\n        axios\r\n          .get(`https://pokeapi.co/api/v2/pokemon?limit=${res.data.count}`)\r\n          .then((res) => {\r\n            setPokemonList(res.data.results);\r\n          })\r\n          .catch((err) => {\r\n            throw err;\r\n          });\r\n      })\r\n      .catch((err) => {\r\n        throw err;\r\n      });\r\n  }, []);\r\n\r\n  //generate a list of 20 random pokemon enclusive to minimun && the species limit\r\n  useEffect(() => {\r\n    if (totalCount) {\r\n      const generateRandom = () => {\r\n        let min = Math.ceil(19);\r\n        let max = Math.floor(totalCount - 1);\r\n        let randomArray = [];\r\n        for (let i = 0; i < 20; i++) {\r\n          randomArray.push(Math.floor(Math.random() * (max - min + 1) + min));\r\n        }\r\n        return randomArray;\r\n      };\r\n      setRandomPokeList(generateRandom);\r\n    }\r\n  }, [pokemonList]);\r\n\r\n  // Automatically renders seleted card on click of a starting card\r\n\r\n  useEffect(() => {\r\n    searchPokeFunc(clickedCard);\r\n  }, [clickedCard]);\r\n\r\n  // Resets sprite version state when generation state has been changed.\r\n  useEffect(() => {\r\n    let keys = [];\r\n    if (getsearchedPoke?.sprites.versions[spriteGen]) {\r\n      for (const [key] of Object.entries(getsearchedPoke?.sprites.versions[spriteGen])) {\r\n        keys.push(key);\r\n        setSpriteVer(keys[0]);\r\n      }\r\n    }\r\n  }, [spriteGen]);\r\n\r\n  // Redner radom pokemon list with child eliment and set an image for each pokemon\r\n  const renderStartingCards = () => {\r\n    if (randomPokeList) {\r\n      return randomPokeList.map((eachCard) => (\r\n        <div\r\n          className=\"starting-card-section__cards\"\r\n          onClick={() => setClickedCard(pokemonList[eachCard].name)}\r\n          key={pokemonList[eachCard].name}\r\n        >\r\n          <StartingCards\r\n            image={`https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/official-artwork/${\r\n              pokemonList[eachCard].url.split(\"/\")[6]\r\n            }.png`}\r\n            header={pokemonList[eachCard].name}\r\n          />\r\n        </div>\r\n      ));\r\n    } else {\r\n      return <span>Loading Data</span>;\r\n    }\r\n  };\r\n\r\n  // validates and filters input data then makes a call to get all data for a specific pokemon\r\n\r\n  const searchPokeFunc = (setPoke) => {\r\n    let validate = pokemonList?.filter(\r\n      (pokemon) => pokemon.name === setPoke?.toLowerCase().split(\" \").join(\"-\")\r\n    );\r\n    if (setPoke && validate[0]) {\r\n      axios\r\n        .get(`https://pokeapi.co/api/v2/pokemon/${setPoke.toLowerCase().split(\" \").join(\"-\")}`)\r\n        .then((res) => {\r\n          setGetSearchedPoke(res.data);\r\n        })\r\n        .catch((err) => {\r\n          throw err;\r\n        });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <section className=\"form-section\">\r\n        <form\r\n          className=\"form-section__form\"\r\n          action=\"#\"\r\n          onSubmit={(e) => {\r\n            e.preventDefault();\r\n            searchPokeFunc(searchedPoke);\r\n          }}\r\n        >\r\n          <input\r\n            className=\"form-section__form__input\"\r\n            placeholder=\"search for Pokemon\"\r\n            onChange={(e) => {\r\n              setSearchedPoke(e.target.value);\r\n            }}\r\n          />{\" \"}\r\n          <div className=\"form-section__suggestion\">\r\n            {pokemonList?.map((pokemon) => {\r\n              if (pokemon.name?.includes(searchedPoke) && pokemon.name[0] === searchedPoke[0]) {\r\n                return (\r\n                  <div className=\"form-section__suggestion__text\" key={pokemon.name}>\r\n                    {pokemon.name.charAt(0).toUpperCase() + pokemon.name.slice(1)}\r\n                  </div>\r\n                );\r\n              }\r\n            })}\r\n          </div>\r\n          <button type=\"submit\" className=\"form-section__form__button\">\r\n            Search\r\n          </button>\r\n        </form>\r\n      </section>\r\n      <section className=\"selected-card-section\">\r\n        {getsearchedPoke ? (\r\n          <SelectedCard\r\n            name={getsearchedPoke?.name}\r\n            height={getsearchedPoke?.height * 10 + \" cm\"}\r\n            weight={getsearchedPoke?.weight / 10 + \" Kg\"}\r\n            abilities={getsearchedPoke?.abilities}\r\n            stats={getsearchedPoke?.stats}\r\n            getsearchedPoke={getsearchedPoke}\r\n            setSpriteGen={setSpriteGen}\r\n            setSpriteVer={setSpriteVer}\r\n            spriteGen={spriteGen}\r\n            spriteObj={getsearchedPoke?.sprites.versions[spriteGen][spriteVer]}\r\n            spriteVer={spriteVer}\r\n          />\r\n        ) : (\r\n          <div></div>\r\n        )}\r\n      </section>\r\n      {/* <section>\r\n        {getsearchedPoke ? (\r\n          <DropDown\r\n            getsearchedPoke={getsearchedPoke}\r\n            setSpriteGen={setSpriteGen}\r\n            setSpriteVer={setSpriteVer}\r\n            spriteGen={spriteGen}\r\n          />\r\n        ) : (\r\n          <div></div>\r\n        )}\r\n      </section> */}\r\n      {/* <section>\r\n        <SpriteCollection\r\n          spriteObj={getsearchedPoke?.sprites.versions[spriteGen][spriteVer]}\r\n          getsearchedPoke={getsearchedPoke}\r\n          spriteGen={spriteGen}\r\n          spriteVer={spriteVer}\r\n        />\r\n      </section> */}\r\n      <section className=\"starting-card-section\"> {renderStartingCards()}</section>\r\n    </div>\r\n  );\r\n}\r\n","import \"./App.css\";\r\nimport Home from \"./components/pages/Home\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Home />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}